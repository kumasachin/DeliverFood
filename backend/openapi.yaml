openapi: 3.0.3
info:
  title: Food Delivery service API
  description: |-
    Toptal test project Food Delivery service API docs.
  version: '1.0'
servers:
  - url: http://localhost:3000

tags:
  - name: Orders
  - name: Restaurants
  - name: Meals
  - name: Coupons
  - name: Authentication

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Zero-indexed page number. Defaults to 0.
        limit:
          type: integer
          description: Number of items to retrieve per page. Defaults to 20.
    Coordinates:
      type: object
      properties:
        lat:
          type: string
          description: Latitude represented in degrees as a string with up to 9 decimal places
          example: '19.86943894'
        lng:
          type: string
          description: Longitude represented in degrees as a string with up to 9 decimal places
          example: '-42.53932'
    Restaurant:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        title:
          type: string
          description: Restaurant listing title
          example: Beautiful downtown restaurant
        description:
          type: string
          description: Restaurant listing description
          example: Modern looking restaurant with a beautiful balcony
        cuisine:
          type: string
          description: Cuisine type
          enum:
            - italian
            - french
            - chinese
            - japanese
            - indian
            - mexican
            - greek
        owner_uuid:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        coordinates:
          $ref: '#/components/schemas/Coordinates'
    CreateRestaurant:
      type: object
      properties:
        title:
          type: string
          description: Restaurant listing title
          example: Beautiful downtown restaurant
        description:
          type: string
          description: Restaurant listing description
          example: Modern looking restaurant with a beautiful balcony
        cuisine:
          type: string
          description: Cuisine type
          enum:
            - italian
            - french
            - chinese
            - japanese
            - indian
            - mexican
            - greek
        coordinates:
          $ref: '#/components/schemas/Coordinates'
          nullable: true
    UpdateRestaurant:
      type: object
      properties:
        title:
          type: string
          description: Restaurant listing title
          example: Beautiful downtown restaurant
        description:
          type: string
          description: Restaurant listing description
          example: Modern looking restaurant with a beautiful balcony
        cuisine:
          type: string
          description: Cuisine type
          enum:
            - italian
            - french
            - chinese
            - japanese
            - indian
            - mexican
            - greek
        coordinates:
          $ref: '#/components/schemas/Coordinates'
          nullable: true
    CreateMeal:
      type: object
      properties:
        title:
          type: string
          description: Meal title
          example: Chicken
        description:
          type: string
          description: Meal description
          example: Well done Chicken
        price:
          type: integer
          minimum: 1
        section:
          type: string
          description: 'Meal Section'
          enum: ['breakfast', 'lunch', 'dinner', 'appetizers', 'dessert']
        restaurant_uuid:
          type: string
          format: uuid
    Meal:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        title:
          type: string
          description: Meal title
          example: Chicken
        description:
          type: string
          description: Meal description
          example: Well done Chicken
        price:
          type: integer
          minimum: 1
        section:
          type: string
          description: 'Meal Section'
          enum: ['breakfast', 'lunch', 'dinner', 'appetizers', 'dessert']
        restaurant_uuid:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
    UpdateMeal:
      type: object
      properties:
        title:
          type: string
          description: Meal title
          example: Chicken
        description:
          type: string
          description: Meal description
          example: Well done Chicken
        price:
          type: integer
          minimum: 1
        section:
          type: string
          description: 'Meal Section'
          enum: ['breakfast', 'lunch', 'dinner', 'appetizers', 'dessert']
    OrderItem:
      type: object
      properties:
        meal_uuid:
          type: string
          format: uuid
        quantity:
          type: integer
          minimum: 1
        price:
          type: number
        title:
          type: string
    CreateOrderItem:
      type: object
      properties:
        meal_uuid:
          type: string
          format: uuid
        quantity:
          type: integer
          minimum: 1
    CreateOrder:
      type: object
      properties:
        order_items:
          type: array
          description: The order items
          items: 
            $ref: '#/components/schemas/CreateOrderItem'
        coupon_code:
          type: string
          description: Coupon Code
        tip_amount:
          type: integer
          description: 'Tip amount'
          minimum: 0
    Order:
      type: object
      properties:
        order_items:
          type: array
          description: The order items
          items:
            $ref: '#/components/schemas/OrderItem'
          example:
            - name: "Pizza"
              quantity: 2
              price: 10.99
            - name: "Drink"
              quantity: 1
              price: 2.50
        coupon_code:
          type: string
          description: Coupon Code
          example: "SPECIAL20"
        tip_amount:
          type: integer
          description: 'Tip amount'
          minimum: 0
          example: 5
        restaurant_uuid:
          type: string
          format: uuid
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
    Coupon:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        coupon_code:
          type: string
          example: "SPECIAL20"
        percentage:
          type: number
          example: 20
        restaurant_uuid:
          type: string
          example: "232642a2-e8f5-475b-966e-1061578b555b"
        status:
          type: string
          example: "active"
        created_at:
          type: string
          example: "2024-04-30T12:00:00Z"
    CouponUpdate:
      type: object
      properties:
        percentage:
          type: integer
          description: New discount percentage
          example: 30

  responses:
    BadRequest:
      description: 'Bad Request'
    Forbidden:
      description: 'Forbidden'
    NotFound:
      description: 'Not Found'

paths:
  /registrations:
    post:
      tags: [Authentication]
      summary: 'Register as a new user'
      description: |-
        Response will contain a token. This token can be used through "Authorization: Bearer TOKEN_HERE"
        header to make authenticated requests.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minimum: 8
                  maximum: 50
                  example: 'my.V3ry_Secu?re!$Password'
                role:
                  type: string
                  enum: [customer, owner]
      responses:
        '201':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: string
                    description: 'User UUID'
                    format: uuid
                  email:
                    type: string
                    description: 'User email'
                    format: email
                  role:
                    type: string
                    description: 'User role'
                    enum: [customer, owner]
                  created_at:
                    type: string
                    format: date-time
                  token:
                    type: string
                    format: byte
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiVG9wdGFsIFRlc3QiLCJpYXQiOjE1MTYyMzkwMjJ9.HKiCUjqQtglzbAe0ARyow9DLf_qcJWkijzKm5eU7Dsk'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Conflict - User with provided username or email already exists.

  /tokens:
    post:
      tags: [Authentication]
      summary: 'Create an authentication token'
      description: |-
        Response will contain a token. This token can be used through "Authorization: Bearer TOKEN_HERE"
        header to make authenticated requests.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  example: 'my.V3ry_Secu?re!$Password'
      responses:
        '200':
          description: 'Token created successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    format: byte
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiVG9wdGFsIFRlc3QiLCJpYXQiOjE1MTYyMzkwMjJ9.HKiCUjqQtglzbAe0ARyow9DLf_qcJWkijzKm5eU7Dsk'
        '401':
          description: Unauthorized - Invalid credentials.

  /block/{uuid}:
    post:
      tags: [Authentication]
      summary: 'Block a user'
      description: Blocks a user by UUID. For Only Moderators.
      parameters:
        - name: uuid
          in: path
          description: User UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User successfully blocked.
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'

  /restaurants:
    post:
      tags: [Restaurants]
      summary: Creates a new restaurant
      description: Create a new restaurant with validated details. For Admin or Restaurant Owner.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRestaurant'
      responses:
        '201':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        '400':
          description: 'Validation errors'
    get:
      tags: [Restaurants]
      summary: Get restaurant list
      description: Gets a single page containing up to 20 restaurant ordered from the most recently created one to the oldest.
      parameters:
        - name: page
          in: query
          description: Zero-indexed page number. Defaults to 0
          required: false
          schema:
            type: integer
            minimum: 0
            example: 0
        - name: limit
          in: query
          description: Maximum number of items per page. Defaults to 20.
          required: false
          schema:
            type: integer
            minimum: 1
            example: 20
        - name: title
          in: query
          description: Restaurant title
          required: false
          schema:
            type: string
        - name: description
          in: query
          description: Restaurant description
          required: false
          schema:
            type: string
        - name: cuisine
          in: query
          description: Restaurant cuisine
          required: false
          schema:
            type: string
        - name: owner_uuid
          in: query
          description: Restaurant owner uuid
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
              example:
                - uuid: "abc123"
                  title: "Italiano"
                  description: "Authentic Italian cuisine"
                  cuisine: "italian"
                  owner_uuid: "owner123"
                  created_at: "2024-04-23T12:00:00Z"
                  coordinates:
                    lat: "12.3456"
                    lng: "78.9012"
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
  
  /restaurants/{uuid}:
    get:
      tags: [Restaurants]
      summary: Get a single restaurant
      description: Get details of a specific restaurant by UUID.
      parameters:
        - name: uuid
          in: path
          description: Restaurant UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
              example:
                uuid: "abc123"
                title: "Italiano"
                description: "Authentic Italian cuisine"
                cuisine: "italian"
                owner_uuid: "owner123"
                created_at: "2024-04-23T12:00:00Z"
                coordinates:
                  lat: "12.3456"
                  lng: "78.9012"
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'
    patch:
      tags: [Restaurants]
      summary: Update a single restaurant
      description: Update details of a specific restaurant by UUID. For Admin or Restaurant Owner.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRestaurant'
      parameters:
        - name: uuid
          in: path
          description: Restaurant UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        '404':
          description: 'Restaurant not found'
    delete:
      tags: [Restaurants]
      summary: Delete a restaurant
      description: Delete a restaurant by UUID. For Admin or Restaurant Owner.
      parameters:
        - name: uuid
          in: path
          description: Restaurant UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 'Successful operation'
        '404':
          description: 'Restaurant not found'
  
  /restaurants/{uuid}/meals:
    get:
      tags: [Restaurants]
      summary: Get meals list for restaurant
      description: Get a list of meals for a restaurant based on specified query parameters.
      parameters:
        - name: page
          in: query
          description: Zero-indexed page number. Defaults to 0.
          required: false
          schema:
            type: integer
            minimum: 0
            example: 0
        - name: limit
          in: query
          description: Maximum number of items per page. Defaults to 20.
          required: false
          schema:
            type: integer
            minimum: 1
            example: 20
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: Restaurant UUID.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  meals:
                    type: array
                    items:
                      $ref: '#/components/schemas/Meal'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Restaurant not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    post:
      tags: [Restaurants]
      summary: Creates a new meal
      description: Create a new meal with validated details. For Admin or Restaurant Owner.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMeal'
      responses:
        '201':
          description: The meal was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meal'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Restaurant not found
        '403':
          $ref: '#/components/responses/Forbidden'
  
  /restaurants/{uuid}/coupons:
    get:
      tags: [Restaurants]
      summary: Get coupons of a restaurant
      description: Get Coupons for a specific restaurant by UUID. For Admin or Restaurant Owner.
      parameters:
        - name: page
          in: query
          description: Zero-indexed page number. Defaults to 0.
          required: false
          schema:
            type: integer
            minimum: 0
            example: 0
        - name: limit
          in: query
          description: Maximum number of items per page. Defaults to 20.
          required: false
          schema:
            type: integer
            minimum: 1
            example: 20
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the restaurant
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Coupon'
        '400':
          description: Bad request
        '404':
          description: Restaurant not found
    post:
      summary: Create a new coupon
      description: Create a new coupons for a specific restaurant by UUID. For Admin or Restaurant Owner.
      tags: [Restaurants]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon_code:
                  type: string
                  example: "SPECIAL10"
                percentage:
                  type: number
                  example: 10
                restaurant_uuid:
                  type: string
                  example: "abcdef12-3456-7890-abcd-ef1234567890"
              required:
                - coupon_code
                - percentage
                - restaurant_uuid
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  coupon:
                    $ref: '#/components/schemas/Coupon'
        '400':
          description: Bad request
        '404':
          description: Not found

  /restaurants/{uuid}/orders:
    get:
      tags: [Restaurants]
      summary: Get restaurant orders
      description: Get orders for a specific restaurant by UUID. For Admin or Restaurant Owner.
      parameters:
        - name: page
          in: query
          description: Zero-indexed page number. Defaults to 0
          required: false
          schema:
            type: integer
            minimum: 0
            example: 0
        - name: limit
          in: query
          description: Maximum number of items per page. Defaults to 20.
          required: false
          schema:
            type: integer
            minimum: 1
            example: 20
        - in: path
          name: uuid
          required: true
          description: UUID of the restaurant
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
              example:
                - uuid: "232642a2-e8f5-475b-966e-1061578b555b"
                  customer_uuid: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                  restaurant_uuid: "64fe5fec-c8af-4183-8099-9c22388d2871"
                  status: "completed"
                  total_price: 50
                  tip_amount: 5
                  discount_percentage: 10
                  coupon_code: "SAVE10"
                  created_at: "2024-04-23T12:00:00Z"
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'
          
  /orders:
    post:
      tags: [Orders]
      summary: Create Order
      description: Creates a new order with validated details. For Admin or customer.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrder'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
    get:
      tags: [Orders]
      summary: Get orders
      description: Fetches list of orders. For Admin or customer.
      parameters:
        - name: page
          in: query
          required: false
          description: Zero-indexed page number. Defaults to 0
          schema:
            type: integer
            minimum: 0
            example: 0
        - name: limit
          in: query
          required: false
          description: Number of orders to retrieve per page. Defaults to 20.
          schema:
            type: integer
            minimum: 1
            maximum: 100
            example: 20
        - name: customer_uuid
          in: query
          required: false
          description: UUID of the customer (required for customer-specific orders)
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    uuid:
                      type: string
                    customer_uuid:
                      type: string
                    restaurant_uuid:
                      type: string
                    status:
                      type: string
                    total_price:
                      type: number
                    tip_amount:
                      type: number
                    discount_percentage:
                      type: integer
                    coupon_code:
                      type: string
                    created_at:
                      type: string
                      format: date-time
              example:
                - uuid: "b619ebe4-9385-4737-aeca-e6b64347fb81"
                  customer_uuid: "6a1f8646-eb13-47b7-9021-08d94fc5190c"
                  restaurant_uuid: "795d84c5-81cb-4e6a-b5d0-88291fb1e6c9"
                  status: "placed"
                  total_price: 0
                  tip_amount: 0
                  discount_percentage: 100
                  coupon_code: "SPECIAL10"
                  created_at: "2024-04-29T17:39:40.848Z"
                - uuid: "a674344c-87a5-49da-ba77-baf5a5260514"
                  customer_uuid: "6a1f8646-eb13-47b7-9021-08d94fc5190c"
                  restaurant_uuid: "795d84c5-81cb-4e6a-b5d0-88291fb1e6c9"
                  status: "placed"
                  total_price: 0.9
                  tip_amount: 0
                  discount_percentage: 10
                  coupon_code: "SPECIAL10"
                  created_at: "2024-04-29T17:38:39.194Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'

  /orders/{uuid}:
    get:
      tags:
        - Orders
      summary: Get details of a single order
      description: Get details of a specific order by UUID.
      parameters:
        - in: path
          name: uuid
          required: true
          description: UUID of the order
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      tags: [Orders]
      summary: Update order status
      description: Update status of a specific order by UUID.
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the order to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: Status to be updated
                  example: processing
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example:
                uuid: "order123"
                customer_uuid: "customer123"
                restaurant_uuid: "abc123"
                status: "completed"
                total_price: 50.00
                tip_amount: 5.00
                discount_percentage: 10
                coupon_code: "SAVE10"
                created_at: "2024-04-23T12:00:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'

  /orders/{uuid}/status:
    get:
      tags: [Orders]
      summary: Get order status
      description: Get status of a specific order by UUID.
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the order
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  updated_at:
                    type: string
                    format: date-time
              example:
                status: "completed"
                updated_at: "2024-04-30T12:00:00Z"
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'
          
  /orders/{uuid}/history:
    get:
      tags: [Orders]
      summary: Get order history
      description: Get history of changes for a specific order by UUID.
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the order to get history for
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    status: 
                      type: string
                    changed_at:
                      type: string
                      format: date-time
              example:
                - status: "completed"
                  changed_at: "2024-04-23T12:00:00Z"
                - status: "cancelled"
                  changed_at: "2024-04-24T12:00:00Z"
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'
                      
  /meals/{uuid}:
    get:
      tags: [Meals]
      summary: Get a signle meal
      description: Get details of a specific meal by UUID.
      parameters:
        - in: path
          name: uuid
          required: true
          description: UUID of the meal to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meal'
        '404':
          description: Not Found
    patch:
      tags: [Meals]
      summary: Update a single meal
      description: Update details of a specific meal by UUID. For Admin or meal restaurant owner.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMeal'
      parameters:
        - name: uuid
          in: path
          description: Meal UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: The meal was successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meal'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'
    delete:
      tags: [Meals]
      summary: Delete a meal
      description: Delete a meal by UUID. For Admin or meal restaurant owner.
      parameters:
        - name: uuid
          in: path
          description: Meal UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The meal was successfully deleted.
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'


  /coupons/{uuid}:
    get:
      summary: Get a single coupon
      description: Get details of a specific coupon by UUID. For Admin or coupon restaurant owner.
      tags: 
        - Coupons
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '404':
          description: Not found
    patch:
      tags: 
        - Coupons
      summary: Update a single coupon
      description: Update details of a specific coupon by UUID. For Admin or coupon restaurant owner.
      parameters:
        - in: path
          name: uuid
          required: true
          description: UUID of the coupon to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouponUpdate'
      responses:
        '200':
          description: Coupon updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '400':
          description: Bad request (e.g., validation error)
        '404':
          description: Coupon not found or already inactive
    delete:
      summary: Delete a coupon
      description: Delete a coupon by UUID. For Admin or coupon restaurant owner.
      tags: 
        - Coupons
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Successful operation
        '404':
          description: Not found